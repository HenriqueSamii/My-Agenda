// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyAgenda.API.Data.Class;

namespace MyAgenda.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("MyAgenda.API.Models.Class.BlocoDaAgenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Cancelado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Comeco")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fim")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LocalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notas")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocalId");

                    b.ToTable("BlocosDaAgenda");
                });

            modelBuilder.Entity("MyAgenda.API.Models.Class.Estabelecimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<int>("DonoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FunciomantoDiasDaSemana")
                        .HasColumnType("TEXT");

                    b.Property<string>("FunciomantoHorarios")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Privado")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DonoId");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("Estabelecimentos");
                });

            modelBuilder.Entity("MyAgenda.API.Models.Class.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActivoDiasDaSemana")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActivoHorarios")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BlocoDaAgendaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NivelDePermicao")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrabalhaParaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BlocoDaAgendaId");

                    b.HasIndex("ContaId");

                    b.HasIndex("TrabalhaParaId");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("MyAgenda.API.Models.Class.FuncionarioServico", b =>
                {
                    b.Property<int>("FuncionarioId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServicoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FuncionarioId", "ServicoId");

                    b.HasIndex("ServicoId");

                    b.ToTable("FuncionariosServicos");
                });

            modelBuilder.Entity("MyAgenda.API.Models.Class.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BlocoDaAgendaId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EstabelecimentoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantidade")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Valor")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BlocoDaAgendaId");

                    b.HasIndex("EstabelecimentoId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("MyAgenda.API.Models.Class.Servico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BlocoDaAgendaId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EstabelecimentoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("TempoDeDuracao")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Valor")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BlocoDaAgendaId");

                    b.HasIndex("EstabelecimentoId");

                    b.ToTable("Servicos");
                });

            modelBuilder.Entity("MyAgenda.API.Models.Class.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EstabelecimentoId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EstabelecimentoId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("MyAgenda.API.Models.Class.UsuarioBlocoDaAgenda", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlocoDaAgendaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UsuarioId", "BlocoDaAgendaId");

                    b.HasIndex("BlocoDaAgendaId");

                    b.ToTable("UsuariosBlocosDaAgenda");
                });

            modelBuilder.Entity("MyAgenda.API.Models.Class.BlocoDaAgenda", b =>
                {
                    b.HasOne("MyAgenda.API.Models.Class.Estabelecimento", "Local")
                        .WithMany("Agenda")
                        .HasForeignKey("LocalId");
                });

            modelBuilder.Entity("MyAgenda.API.Models.Class.Estabelecimento", b =>
                {
                    b.HasOne("MyAgenda.API.Models.Class.Usuario", "Dono")
                        .WithMany("MeusEstabelecimentos")
                        .HasForeignKey("DonoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyAgenda.API.Models.Class.Funcionario", b =>
                {
                    b.HasOne("MyAgenda.API.Models.Class.BlocoDaAgenda", null)
                        .WithMany("Prestadores")
                        .HasForeignKey("BlocoDaAgendaId");

                    b.HasOne("MyAgenda.API.Models.Class.Usuario", "Conta")
                        .WithMany("FuncionarioDe")
                        .HasForeignKey("ContaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyAgenda.API.Models.Class.Estabelecimento", "TrabalhaPara")
                        .WithMany("Funcionarios")
                        .HasForeignKey("TrabalhaParaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyAgenda.API.Models.Class.FuncionarioServico", b =>
                {
                    b.HasOne("MyAgenda.API.Models.Class.Funcionario", "Funcionario")
                        .WithMany("Funcoes")
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyAgenda.API.Models.Class.Servico", "Servico")
                        .WithMany("Prestadores")
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyAgenda.API.Models.Class.Produto", b =>
                {
                    b.HasOne("MyAgenda.API.Models.Class.BlocoDaAgenda", null)
                        .WithMany("Cesta")
                        .HasForeignKey("BlocoDaAgendaId");

                    b.HasOne("MyAgenda.API.Models.Class.Estabelecimento", null)
                        .WithMany("Estoque")
                        .HasForeignKey("EstabelecimentoId");
                });

            modelBuilder.Entity("MyAgenda.API.Models.Class.Servico", b =>
                {
                    b.HasOne("MyAgenda.API.Models.Class.BlocoDaAgenda", null)
                        .WithMany("Servicos")
                        .HasForeignKey("BlocoDaAgendaId");

                    b.HasOne("MyAgenda.API.Models.Class.Estabelecimento", null)
                        .WithMany("Servicos")
                        .HasForeignKey("EstabelecimentoId");
                });

            modelBuilder.Entity("MyAgenda.API.Models.Class.Usuario", b =>
                {
                    b.HasOne("MyAgenda.API.Models.Class.Estabelecimento", null)
                        .WithMany("UsuariosPermitidos")
                        .HasForeignKey("EstabelecimentoId");
                });

            modelBuilder.Entity("MyAgenda.API.Models.Class.UsuarioBlocoDaAgenda", b =>
                {
                    b.HasOne("MyAgenda.API.Models.Class.BlocoDaAgenda", "BlocoDaAgenda")
                        .WithMany("Clientes")
                        .HasForeignKey("BlocoDaAgendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyAgenda.API.Models.Class.Usuario", "Usuario")
                        .WithMany("Agenda")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
